/* eslint no-console:0 */
import 'rc-tree/assets/index.less';
import './draggable.less';
import React from 'react';
import ReactDOM from 'react-dom';
import Tree, { TreeNode } from 'rc-tree';
import { gData } from './util';

class Demo extends React.Component {
  state = {
    gData,
    autoExpandParent: true,
    expandedKeys: ['0-0-key', '0-0-0-key', '0-0-0-0-key'],
    visible:'none',
    zzindex:-1,
    dragNode: null,
    dropNode:null,
    dropToGap:false,
    left:'1px',
    top:'1px'
  };

  onDragStart = (e) => {
    console.log('start', e);
  }
  onDragEnter = (info) => {
    console.log('enter', info);
    this.setState({
      expandedKeys: info.expandedKeys,
    });
  }

  //change to pop menu :copy,move,cacel,when click move ,use this event.
  onDrop = (info) => {
    console.log('drop', info);
    console.log('test move pop menu')
    const dropNode = info.node;//.props.eventKey;
    const dragNode = info.dragNode;//.props.eventKey;
    console.log('dropNode', dropNode);
    console.log('dragNode',dragNode)

    console.log('lefposition',dragNode.selectHandle.offsetLeft+"px")
    console.log('topposition',dragNode.selectHandle.offsetTop+"px")
    this.setState({
      visible:'block',
      zzindex:9999,
      dropNode:dropNode,
      dragNode:dragNode,
      dropToGap:info.dropToGap,
      left:dragNode.selectHandle.offsetLeft+"px",
      top:dragNode.selectHandle.offsetTop+"px"
    })

  }

  onDropData=()=>{

    const dropKey = this.state.dropNode.props.eventKey;
    const dragKey = this.state.dragNode.props.eventKey;
       console.log('drag',this.state.dragNode);
    // const dragNodesKeys = this.refs.myTree.dragNodesKeys;
    const loop = (data, key, callback) => {
      data.forEach((item, index, arr) => {
        if (item.key === key) {
          return callback(item, index, arr);
        }
        if (item.children) {
          return loop(item.children, key, callback);
        }
      });
    };
    const data = [...this.state.gData];
    let dragObj;
    loop(data, dragKey, (item, index, arr) => {
      arr.splice(index, 1);
      dragObj = item;
    });
    if (this.refs.myTree.dropToGap) {
      let ar;
      let i;
      loop(data, dropKey, (item, index, arr) => {
        ar = arr;
        i = index;
      });
      ar.splice(i, 0, dragObj);
    } else {
      loop(data, dropKey, (item) => {
        item.children = item.children || [];
        // where to insert 示例添加到尾部，可以是随意位置
        item.children.push(dragObj);
      });
    }
    this.setState({
      gData: data,
      visible:'none',
    });
  }

  onCopyData=() =>{
      const dropKey = this.state.dropNode.props.eventKey;
    const dragKey = this.state.dragNode.props.eventKey;
    // const dragNodesKeys = info.dragNodesKeys;
    //define loop:find the dragObj  并执行callback函数。  foreach的第三个参数是数组本身。
    const loop = (data, key, callback) => {
      data.forEach((item, index, arr) => {
        if (item.key === key) {
          return callback(item, index, arr);
        }
        if (item.children) {
          return loop(item.children, key, callback);
        }
      });
    };
    //所有数据
    const data = [...this.state.gData];
    let dragObj;
    //调用loop函数，找到dragObj后，执行下面回调函数。
    loop(data, dragKey, (item, index, arr) => {
      //arr.splice(index, 1); //复制不需要删除老数据
      dragObj = item;
    });
    if (this.state.dropToGap) {
      let ar;
      let i;
      loop(data, dropKey, (item, index, arr) => {
        ar = arr;
        i = index;
         item.children = item.children || [];
        // where to insert 示例添加到尾部，可以是随意位置
        item.children.push(dragObj);
      });
      //ar.splice(i, 0, dragObj);
    } else {
      loop(data, dropKey, (item) => {
        item.children = item.children || [];
        // where to insert 示例添加到尾部，可以是随意位置
        item.children.push(dragObj);
      });
    }
    this.setState({
      gData: data,
      visible:'none',
    });
    }


    onCancel=(e) =>{
      this.setState({
      visible:'none',
    });
    }

  onExpand = (expandedKeys) => {
    console.log('onExpand', arguments);
    this.setState({
      expandedKeys,
      autoExpandParent: false,
    });
  }

  render() {
    const loop = data => {
      return data.map((item) => {
        if (item.children && item.children.length) {
          return <TreeNode key={item.key} title={item.title}>{loop(item.children)}</TreeNode>;
        }
        return <TreeNode key={item.key} title={item.title} />;
      });
    };
    console.log('onExpand', this.state.gData);

    return (
      <div >
        <div style={{display:this.state.visible,zIndex:this.state.zzindex,background:'#CCC',position:'absolute',left:this.state.left,top:this.state.top}}>
        <div style={{display:this.state.visible}}><a title="复制" onClick={this.onCopyData}>复制</a> </div>
        <div style={{display:this.state.visible}}><a title="移动" onClick={this.onDropData}>移动</a> </div>
        <div style={{display:this.state.visible}}><a title="取消" onClick={this.onCancel}>取消</a> </div>
      </div>
      <p>drag a node into another node</p>
      <div className="draggable-container">
        <Tree  ref="myTree"
          //expandedKeys={this.state.expandedKeys}
          onExpand={this.onExpand} autoExpandParent={this.state.autoExpandParent}
          draggable
          onDragStart={this.onDragStart}
          onDragEnter={this.onDragEnter}
          onDrop={this.onDrop}
        >
          {loop(this.state.gData)}
        </Tree>
      </div>
    </div>);
  }
}


ReactDOM.render(<Demo />, document.getElementById('__react-content'));
